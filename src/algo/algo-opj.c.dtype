// This file is part of SCIL.
//
// SCIL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SCIL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with SCIL.  If not, see <http://www.gnu.org/licenses/>.

#include <math.h>
#include <string.h>

#include <algo/algo-opj.h>
#include <algo/algo-opj-init.c.x>

#include <openjpeg.h>
#include <opj_config.h>

/* -------------------------------------------------------------------------- */


static int find_min_max_<DATATYPE>(<DATATYPE>* restrict min,
                                   <DATATYPE>* restrict max,
                                   const <DATATYPE>* buf,
                                   const uint64_t size)
{
    assert(buf != NULL);

    *min = INFINITY;
    *max = -INFINITY;

    for (uint64_t i = 0; i < size; ++i) {
        if (buf[i] < *min) *min = buf[i];
        if (buf[i] > *max) *max = buf[i];
    }

    return 0;
}

static uint8_t get_needed_bit_count_<DATATYPE>(const <DATATYPE> min_value,
                                               const <DATATYPE> max_value,
                                               const double absolute_tolerance)
{
    assert(max_value > min_value);
    assert(absolute_tolerance > 0);

    return (uint8_t)ceil(log2(1 +
                              (double)(max_value - min_value) /
                                  (2 * absolute_tolerance))); // TODO: Test this
}

static uint64_t int_repres_<DATATYPE>(const <DATATYPE> num,
                                      const <DATATYPE> min,
                                      const double absolute_tolerance)
{
    // printf("num %f, min %f\n", num, min);
    assert(num >= min);

    return (uint64_t)round((double)(num - min) / (2 * absolute_tolerance));
}

static <DATATYPE> DataType_repres_<DATATYPE>(const uint64_t num,
                                            const <DATATYPE> min,
                                            const double absolute_tolerance)
{
    return (<DATATYPE>)((double)min + num * 2 * absolute_tolerance);
}
/* -------------------------------------------------------------------------- */

#define NUM_COMPS_MAX 4

#pragma GCC diagnostic ignored "-Wunused-parameter"
int scil_opj_compress_<DATATYPE>(const scil_context_p ctx,
                                    byte* restrict dest,
                                    size_t* restrict dest_size,
                                    <DATATYPE>* restrict source,
                                    const scil_dims* dims)
{
  return 0;
}

#pragma GCC diagnostic ignored "-Wunused-parameter"
int scil_opj_decompress_<DATATYPE>(<DATATYPE>* restrict dest,
                                      scil_dims* dims,
                                      byte* restrict source,
                                      const size_t source_size)
{

  return 0;
}
