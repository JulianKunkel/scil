// This file is part of SCIL.
//
// SCIL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SCIL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with SCIL.  If not, see <http://www.gnu.org/licenses/>.

#include <scil.h>
#include <scil-swager.h>

#include <algo/algo-sigbits.h>
#include <algo/algo-sigbits-init.c.x>

static uint8_t end_mask[9] = {0, 255-127, 255-63, 255-31, 255-15, 255-7, 255-3, 255-1, 255};
// 00000000 10000000 11000000 11100000 11110000 11111000 11111100 11111110 11111111

static void find_minimums_and_maximums_<DATATYPE>(const <DATATYPE>* buf,
                                                  const size_t size,
                                                  uint8_t* min_sign,
                                                  uint8_t* max_sign,
                                                  int16_t* min_exponent,
                                                  int16_t* max_exponent){

    *min_sign = 1;
    *max_sign = 0;

    *min_exponent = 0x7fff;
    *max_exponent = -*min_exponent;

    for(size_t i = 0; i < size; ++i){

        datatype_cast_<DATATYPE> cur;
        cur.f = buf[i];

        if(*min_sign != 0 && cur.p.sign < *min_sign) *min_sign = cur.p.sign;
        if(*max_sign != 1 && cur.p.sign > *max_sign) *max_sign = cur.p.sign;

        if(cur.p.exponent < *min_exponent) *min_exponent = cur.p.exponent;
        if(cur.p.exponent > *max_exponent) *max_exponent = cur.p.exponent;
    }
}

static uint64_t compress_value_<DATATYPE>(<DATATYPE> value, uint8_t signs_id, uint8_t exp_bits, uint8_t mant_bits, int16_t min_exponent){

    uint64_t result = 0;

    datatype_cast_<DATATYPE> cur;
    cur.f = value;

    if(signs_id == 2){
        result = ((uint64_t)cur.p.sign) << exp_bits;
    }
    result |= (uint64_t)(cur.p.exponent - min_exponent);
    result <<= mant_bits;
    result |= ((uint64_t)cur.p.mantissa) >> (MANTISSA_LENGTH_<DATATYPE> - mant_bits);

    return result;
}

static <DATATYPE> decompress_value_<DATATYPE>(uint64_t value, uint8_t bits_per_value, uint8_t signs_id, uint8_t exp_bits, uint8_t mant_bits, int16_t min_exponent){

    datatype_cast_<DATATYPE> cur;

    cur.p.sign = get_sign(value, bits_per_value, signs_id);
    cur.p.exponent = get_exponent(value, exp_bits, mant_bits, min_exponent);
    cur.p.mantissa = get_mantissa_<DATATYPE>(value, mant_bits);

    return cur.f;
}

static int compress_buffer_<DATATYPE>(uint64_t* const restrict dest,
                                      const <DATATYPE>* const restrict source,
                                      size_t count,
                                      uint8_t signs_id,
                                      uint8_t exponent_bit_count,
                                      uint8_t mantissa_bit_count,
                                      uint8_t minimum_exponent){

    for(size_t i = 0; i < count; ++i){
        dest[i] = compress_value_<DATATYPE>(source[i], signs_id, exponent_bit_count, mantissa_bit_count, minimum_exponent);
    }

    return SCIL_NO_ERR;
}

static int decompress_buffer_<DATATYPE>(<DATATYPE>* const restrict dest,
                                        const byte* restrict source,
                                        size_t count,
                                        uint8_t bits_per_value
                                        uint8_t signs_id,
                                        uint8_t exponent_bit_count,
                                        uint8_t mantissa_bit_count,
                                        uint8_t minimum_exponent){

    for (size_t i = 0; i < count; ++i) {
        dest[i] = decompress_value_<DATATYPE>(source[i], bits_per_value, signs_id, exp_bits, mant_bits, min_exponent);
    }

    return SCIL_NO_ERR;
}

int scil_sigbits_compress_<DATATYPE>(const scil_context_p ctx,
                                     byte * restrict dest,
                                     size_t* restrict dest_size,
                                     <DATATYPE>*restrict source,
                                     const scil_dims* dims){

    size_t count = scil_get_data_count(dims);

    uint8_t min_sign, max_sign;
    int16_t min_exponent, max_exponent;
    find_minimums_and_maximums_<DATATYPE>(source, count, &min_sign, &max_sign, &min_exponent, &max_exponent);

    uint8_t signs_id = calc_sign_bits(min_sign, max_sign);
    uint8_t exp_bits = calc_exp_bits(min_exponent, max_exponent);
    uint8_t mant_bits = ctx->hints.significant_bits;

    uint16_t bits_per_value = (signs_id == 2) + exp_bits + mant_bits;

    if(bits_per_value >= 8 * sizeof(<DATATYPE>)){
        return SCIL_PRECISION_ERR;
    }

    *dest_size = round_up_byte(bits_per_value * count) + SCIL_SIGBITS_HEADER_SIZE;

    // ==================== Compression ========================================
    // Allocate intermediate buffer
    uint64_t* compressed_buffer = (uint64_t*)SAFE_MALLOC(count * sizeof(uint64_t));

    write_header(dest, signs_id, exp_bits, mant_bits, min_exponent);

    // Compress each value in source buffer
    if(compress_buffer_<DATATYPE>(compressed_buffer, source, count, signs_id, exponent_bit_count, mantissa_bit_count, minimum_exponent)){
        free(compressed_buffer);
        return SCIL_BUFFER_ERR;
    }

    // Pack compressed values tightly
    if(scil_swage(dest, compressed_buffer, count, (uint8_t)bits_per_value)){
        return SCIL_BUFFER_ERR;
    }
    // =========================================================================

    free(compressed_buffer);

    return 0;
}

int scil_sigbits_decompress_<DATATYPE>( <DATATYPE>*restrict data_out,
                            scil_dims* dims,
                            byte*restrict compressed_buf_in,
                            const size_t in_size){

    assert(compressed_buf_in != NULL);

    uint8_t signs_id, exp_bits, mant_bits;
    int16_t min_exponent;

    size_t in_size_cp = in_size;

    signs_id = *((uint8_t*)compressed_buf_in);
    compressed_buf_in++;
    in_size_cp--;

    exp_bits = *((uint8_t*)compressed_buf_in);
    compressed_buf_in++;
    in_size_cp--;

    mant_bits = *((uint8_t*)compressed_buf_in);
    compressed_buf_in++;
    in_size_cp--;

    min_exponent = *((int16_t*)compressed_buf_in);
    compressed_buf_in += 2;
    in_size_cp -= 2;

    // Decompress
    uint64_t max_index = scil_get_data_count(dims);
    uint64_t index = 0;
    uint8_t bits_per_value = (signs_id == 2) + exp_bits + mant_bits;
    for(uint64_t i = 0; index < max_index; i+=bits_per_value){

        // Get index of start and end byte
        uint64_t start_byte = i / 8;
        uint64_t end_byte = (i + bits_per_value) / 8;

        // # of bits in byte before bit index (i)
        uint8_t first_byte_before = i % 8;
        // # of bits in byte after bit index (i)
        uint8_t first_byte_after = 8 - first_byte_before;

        uint64_t value = 0;
        if(start_byte == end_byte){

            value = get_bits(compressed_buf_in[start_byte], first_byte_after, bits_per_value);

        }else{

            // Get start byte relevant bits
            value = get_bits(compressed_buf_in[start_byte], first_byte_after, first_byte_after);

            // Get intermediate bytes bits
            for(uint64_t j = start_byte + 1; j < end_byte; ++j){

                value <<= 8;
                value |= get_bits(compressed_buf_in[j], 8, 8);
            }

            // Get last byte relevant bits
            uint8_t remaining_bits = bits_per_value - first_byte_after - (end_byte - start_byte - 1) * 8;

            if(remaining_bits != 0){

                value <<= remaining_bits;
                uint8_t bits = get_bits(compressed_buf_in[end_byte], 8, remaining_bits);
                value |= bits;
                //printf("%lu\t%f\n", value, DataType_repres(value, min, abs_tol));
            }
        }

        data_out[index] = decompress_<DATATYPE>(value, bits_per_value, signs_id, exp_bits, mant_bits, min_exponent);
        ++index;
    }

    return 0;
}
