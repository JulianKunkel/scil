// This file is part of SCIL.
//
// SCIL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SCIL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with SCIL.  If not, see <http://www.gnu.org/licenses/>.

#include <algo/algo-zfp.h>
#include <algo/algo-zfp-init.c.x>

#include <string.h>

#include <scil-util.h>

#include <zfp.h>

#pragma GCC diagnostic ignored "-Wunused-parameter"
int scil_zfp_compress_<DATATYPE>(const scil_context* ctx,
                        byte * restrict dest,
                        size_t* restrict dest_size,
                        <DATATYPE>*restrict source,
                        const SCIL_dims_t dims)
{
    int ret = 0;

    scil_write_dims_to_buffer(dest, dims);

    zfp_field* field;

    switch(dims.dims){
        case 1: field = zfp_field_1d(source, zfp_type_<DATATYPE>, dims.length[0]); break;
        case 2: field = zfp_field_2d(source, zfp_type_<DATATYPE>, dims.length[0], dims.length[1]); break;
        case 3: field = zfp_field_3d(source, zfp_type_<DATATYPE>, dims.length[0], dims.length[1], dims.length[2]); break;
        default: field = zfp_field_1d(source, zfp_type_<DATATYPE>, scil_get_data_count(dims));
    }

    zfp_stream* zfp = zfp_stream_open(NULL);

    /*  zfp_stream_set_rate(zfp, rate, type, 3, 0); */
    /*  zfp_stream_set_precision(zfp, precision, type); */
    zfp_stream_set_accuracy(zfp, ctx->hints.absolute_tolerance, zfp_type_<DATATYPE>);

    bitstream* stream = stream_open(dest, *dest_size);
    zfp_stream_set_bit_stream(zfp, stream);
    zfp_stream_rewind(zfp);

    *dest_size = zfp_compress(zfp, field);
    if(*dest_size == 0){
        fprintf(stderr, "ZPF compression failed\n");
        ret = 1;
    }

    zfp_field_free(field);
    zfp_stream_close(zfp);
    stream_close(stream);

    return ret;
}

#pragma GCC diagnostic ignored "-Wunused-parameter"
int scil_zfp_decompress_<DATATYPE>(  const scil_context* ctx,
                            <DATATYPE>*restrict dest,
                            SCIL_dims_t exp_count,
                            byte*restrict source,
                            const size_t source_size)
{
    int ret = 0;

    scil_read_dims_from_buffer(exp_count, source);

    zfp_field* field;

    switch(exp_count.dims){
        case 1: field = zfp_field_1d(source, zfp_type_<DATATYPE>, exp_count.length[0]); break;
        case 2: field = zfp_field_2d(source, zfp_type_<DATATYPE>, exp_count.length[0], exp_count.length[1]); break;
        case 3: field = zfp_field_3d(source, zfp_type_<DATATYPE>, exp_count.length[0], exp_count.length[1], exp_count.length[2]); break;
        default: field = zfp_field_1d(source, zfp_type_<DATATYPE>, scil_get_data_count(exp_count));
    }

    zfp_stream* zfp = zfp_stream_open(NULL);

    /*  zfp_stream_set_rate(zfp, rate, type, 3, 0); */
    /*  zfp_stream_set_precision(zfp, precision, type); */
    zfp_stream_set_accuracy(zfp, ctx->hints.absolute_tolerance, zfp_type_<DATATYPE>);

    bitstream* stream = stream_open(dest, scil_get_data_count(exp_count));
    zfp_stream_set_bit_stream(zfp, stream);
    zfp_stream_rewind(zfp);

    size_t s = zfp_decompress(zfp, field);
    if(s == 0){
        fprintf(stderr, "ZPF compression failed\n");
        ret = 1;
    }

    zfp_field_free(field);
    zfp_stream_close(zfp);
    stream_close(stream);

    return ret;
}
