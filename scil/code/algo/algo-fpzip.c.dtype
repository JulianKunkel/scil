// This file is part of SCIL.
//
// SCIL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SCIL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with SCIL.  If not, see <http://www.gnu.org/licenses/>.

#include <algo/algo-fpzip.h>
#include <algo/algo-fpzip-init.c.x>

#include <fpzip.h>

#pragma GCC diagnostic ignored "-Wunused-parameter"
int scil_fpzip_compress_<DATATYPE>(const scil_context* ctx,
                        byte * restrict dest,
                        size_t* restrict dest_size,
                        const <DATATYPE>*restrict source,
                        const SCIL_dims_t dims)
{
    FPZ* fpz = fpzip_write_to_buffer(dest, *dest_size);
    fpz->type = SCIL_TYPE_<DATATYPE>; // in fpzip float is 0 and double 1
    fpz->prec = 0; // lossless

    fpz->nx = scil_get_data_count(dims); // one-dimensional
    fpz->ny = 1; //
    fpz->nz = 1; //
    fpz->nf = 1; //

    if(dims.dims < 5){
        switch(dims.dims){
            case 4: fpz->nf = dims.length[3];
            case 3: fpz->nz = dims.length[2];
            case 2: fpz->ny = dims.length[1];
            case 1: fpz->nx = dims.length[0];
        }
    }

    int ret = compress(fpz, (void*)source);

    fpzip_write_close(fpz);

    return ret;
}

#pragma GCC diagnostic ignored "-Wunused-parameter"
int scil_fpzip_decompress_<DATATYPE>(  const scil_context* ctx,
                            <DATATYPE>*restrict dest,
                            SCIL_dims_t dims,
                            const byte*restrict source,
                            const size_t source_size)
{
    FPZ* fpz = fpzip_read_from_buffer(source);

    // Read dims out of fpz
    dims.dims = 0;
    if(fpz->nx != 1) dims.length[0] = fpz->nx; dims.dims++;
    if(fpz->ny != 1) dims.length[1] = fpz->ny; dims.dims++;
    if(fpz->nz != 1) dims.length[2] = fpz->nz; dims.dims++;
    if(fpz->nf != 1) dims.length[3] = fpz->nf; dims.dims++;

    int ret = decompress(fpz, (void*)dest);

    fpzip_read_close(fpz);

    return ret;
}
